// @ts-nocheck
declare interface Unit {
    __tostring(): void;
    destructor(): void;
    get_by_handle(py_unit: py.Unit): Unit;
    get_by_id(id: py.UnitID): Unit?;
    get_by_res_id(res_id: number): Unit;
    is_exist(): boolean;
    get_id(): number;
    remove_abilitiy_by_key(type: y3.Const.AbilityType, ability_key: py.AbilityKey): void;
    add_item(item_id: py.ItemKey): Item;
    remove_item(item_id: py.ItemKey, num: number): void;
    shift_item(item: Item, type: y3.Const.ShiftSlotTypeAlias, index: number, force: boolean): void;
    exchange_item(item: Item, type: y3.Const.ShiftSlotTypeAlias, index: number): void;
    get_abilities_by_type(type: y3.Const.AbilityType): Ability[];
    get_buffs(): Buff[];
    switch_ability(ability_1: Ability, ability_2: Ability): void;
    switch_ability_by_slot(type_1: y3.Const.AbilityType, slot_1: y3.Const.AbilityIndex, type_2: y3.Const.AbilityType, slot_2: y3.Const.AbilityIndex): void;
    stop_all_abilities(): void;
    add_ability(type: y3.Const.AbilityType, id: py.AbilityKey, slot: any, level: any): void;
    remove_ability(type: y3.Const.AbilityType, slot: y3.Const.AbilityIndex): void;
    find_ability(type: y3.Const.AbilityType, id: py.AbilityKey): Ability?;
    get_ability_by_slot(type: y3.Const.AbilityType, slot: y3.Const.AbilityIndex): Ability?;
    get_item_by_slot(type: y3.Const.SlotType, slot: number): Item?;
    get_all_items(): ItemGroup;
    unit_gains_tech(tech_key: py.TechKey): void;
    create_unit(owner: Player | Unit, unit_id: py.UnitKey, point: Point, direction: number): Unit;
    kill_by(killer: Unit): void;
    is_casting(): boolean;
    create_illusion(illusion_unit: Unit, call_unit: Unit, player: Player, point: Point, direction: number, clone_hp_mp: boolean): void;
    remove(): void;
    blink(point: Point): void;
    set_point(point: Point, isSmooth: boolean): void;
    reborn(point: any): void;
    heals(value: number, skill: any, source_unit: any, text_type: any): void;
    add_tag(tag: string): void;
    remove_tag(tag: string): void;
    add_state(state_enum: number): void;
    remove_state(state_enum: number): void;
    learn(ability_key: py.AbilityKey): void;
    command(command: py.UnitCommand): void;
    move_to_pos(point: Point, range: any): py.UnitCommand;
    stop(): py.UnitCommand;
    hold(point: Point): py.UnitCommand;
    attack_move(point: Point, range: any): py.UnitCommand;
    attack_target(target: Unit, range: number): py.UnitCommand;
    move_along_road(road: Road, patrol_mode: number, can_attack: boolean, start_from_nearest: boolean, back_to_nearest: boolean): py.UnitCommand;
    cast(ability: Ability, target: any, extra_target: any): py.UnitCommand;
    pick_item(item: Item): py.UnitCommand;
    drop_item(item: Item, point: Point): py.UnitCommand;
    give_item(item: Item, target: Unit): py.UnitCommand;
    use_item(item: Item, target: any, extra_target: any): py.UnitCommand;
    follow(target: Unit): py.UnitCommand;
    set_facing(direction: number, turn_time: number): void;
    set_name(name: string): void;
    set_description(description: string): void;
    set_attr(attr_name: string, value: number, attr_type: string): void;
    add_attr(attr_name: string, value: number, attr_type: string): void;
    set_level(level: number): void;
    add_level(level: number): void;
    set_exp(exp: number): void;
    add_exp(exp: number): void;
    set_hp(hp: number): void;
    add_hp(hp: number): void;
    set_mp(mp: number): void;
    add_mp(mp: number): void;
    set_ability_point(skill_point: number): void;
    add_ability_point(skill_point: number): void;
    change_owner(player: Player): void;
    set_height(height: number, trans_time: number): void;
    set_life_cycle(time: number): void;
    pause_life_cycle(is_stop: boolean): void;
    set_alert_range(range: number): void;
    set_cancel_alert_range(range: number): void;
    set_pkg_cnt(number: number): void;
    set_bar_cnt(number: number): void;
    set_behavior(behavior: py.UnitBehavior): void;
    set_attr_growth(unit_key: py.UnitKey, attr_name: string, value: number): void;
    set_reward_exp(exp: number): void;
    set_reward_res(player_attr_name: py.RoleResKey, value: number): void;
    set_attack_type(attack_type: number): void;
    set_armor_type(armor_type: number): void;
    start_ghost(red: number, green: number, blue: number, alpha: number, interval: number, duration: number, start_time: number, end_time: number, is_origin_martial: boolean): void;
    stop_ghost(): void;
    set_ghost_color(red: number, green: number, blue: number, alpha: number): void;
    set_afterimage_time(interval: number, duration: number, start_time: number, end_time: number): void;
    set_icon(img_id: py.Texture): void;
    set_blood_bar_type(bar_type: number): void;
    set_health_bar_display(bar_show_type: number): void;
    set_minimap_icon(img_id: py.Texture): void;
    set_enemy_minimap_icon(img_id: py.Texture): void;
    set_select_effect_visible(bool: boolean): void;
    set_scale(scale: number): void;
    set_turning_speed(speed: number): void;
    replace_model(model_id: py.ModelKey): void;
    cancel_replace_model(model_id: py.ModelKey): void;
    set_transparent_when_invisible(is_visible: boolean): void;
    set_recycle_on_remove(is_recycle: boolean): void;
    set_Xray_is_open(is_open: boolean): void;
    add_tech(tech_id: py.TechKey): void;
    remove_tech(tech_id: py.TechKey): void;
    research_tech(tech_id: py.TechKey): void;
    get_tech_list(): py.TechKey[];
    get_affect_techs(): py.TechKey[];
    set_day_vision(value: number): void;
    set_night_value(value: number): void;
    play_animation(anim_name: string, speed: any, start_time: any, end_time: any, is_loop: any, is_back_normal: any): void;
    stop_animation(anim_name: string): void;
    change_animation(replace_anim_name: string, bereplace_anim_name: string): void;
    cancel_change_animation(replace_anim_name: string, bereplace_anim_name: string): void;
    clear_change_animation(anim_name: string): void;
    stop_cur_animation(): void;
    set_animation_speed(speed: number): void;
    add_goods(tag_name: py.TabName, item_key: py.ItemKey): void;
    remove_goods(item_name: py.TabName, item_key: py.ItemKey): void;
    set_goods_stack(tag_name: py.TabName, item_key: py.ItemKey, number: number): void;
    sell(unit: Unit, item: Item): void;
    buy(unit: Unit, tag_num: py.TabIdx, item_key: py.ItemKey): void;
    add_buff(data: Buff.AddData): Buff?;
    remove_buffs_by_key(buff_key: py.ModifierKey): void;
    remove_buffs_by_effect_type(effect_type: y3.Const.EffectType): void;
    find_buff(buff_key: py.ModifierKey, index: any): Buff?;
    get_goods_cd(page: py.TabIdx, index: number): number;
    get_goods_remaining_cd(page: py.TabIdx, index: number): number;
    get_shop_item_list(page: py.TabIdx): py.ItemKey[];
    get_hp(): number;
    get_mp(): number;
    get_final_attr(attr_name: string): number;
    get_attr_other(attr_name: string): number;
    get_attr_base(attr_name: string): number;
    get_attr_base_ratio(attr_name: string): number;
    get_attr_bonus(attr_name: string): number;
    get_attr_all_ratio(attr_name: string): number;
    get_attr_bonus_ratio(attr_name: string): number;
    get_attr_growth_by_key(unit_key: py.UnitKey, attr_name: any): number;
    get_life_cycle(): number;
    get_height(): number;
    get_turning_speed(): number;
    get_alert_range(): number;
    get_cancel_alert_range(): number;
    get_collision_radius(): number;
    get_owner(): Player;
    get_unit_resource_cost(unit_id: py.UnitKey, player_attr_name: py.RoleResKey): number;
    get_reward_res(player_attr_name: py.RoleResKey): number;
    get_scale(): number;
    get_unit_selection_range_scale(): number;
    get_x_scale(): number;
    get_z_scale(): number;
    get_y_scale(): number;
    get_shop_range(): number;
    get_level(): number;
    get_type(): py.UnitType;
    get_key(): py.UnitKey;
    get_exp(): number;
    get_upgrade_exp(): number;
    get_ability_point(): number;
    get_pkg_cnt(): number;
    get_bar_cnt(): number;
    get_item_type_number_of_unit(item_key: py.ItemKey): number;
    get_exp_reward(): number;
    get_shield(shield_type: number): number;
    get_shop_tab_number(): number;
    get_goods_stack(tag_index: py.TabIdx, item_key: py.ItemKey): number;
    get_name(): string;
    get_description(): string;
    get_name_by_key(unit_key: py.UnitKey): string;
    get_description_by_key(unit_key: py.UnitKey): string;
    get_shop_tab_name(tag_index: py.TabIdx): string;
    get_subtype(): py.UnitType;
    get_icon_by_key(unit_key: py.UnitKey): number;
    get_last_created_unit(): Unit?;
    get_parent_unit(): Unit?;
    get_illusion_owner(): Unit?;
    get_facing(): number;
    get_armor_type(): number;
    get_attack_type(): number;
    get_goods_key(tag_index: py.TabIdx, item_index: number): py.ItemKey;
    get_model(): py.ModelKey;
    get_source_model(): py.ModelKey;
    get_point(): Point;
    get_nearest_valid_point(): Point;
    get_team(): py.Camp;
    has_tag(tag_name: string): boolean;
    is_alive(): boolean;
    can_visible(target_unit: Unit): boolean;
    is_moving(): boolean;
    is_in_radius(other: Unit, range: number): boolean;
    is_shop(): boolean;
    is_illusion(): boolean;
    is_in_group(group: UnitGroup): boolean;
    is_in_battle(): boolean;
    has_buff_status(state_name: number): boolean;
    has_ability_by_key(ability_key: py.AbilityKey): boolean;
    has_item(item: Item): boolean;
    has_item_by_key(item_key: py.ItemKey): boolean;
    has_buff_by_key(buff_key: py.ModifierKey): boolean;
    has_buff_by_effect_type(effect_type: y3.Const.EffectType): boolean;
    unit_has_modifier_tag(tag_name: string): boolean;
    check_precondition_by_key(player: Player, unit_key: py.UnitKey): boolean;
    is_ally(target_unit: Unit): boolean;
    is_enemy(target_unit: Unit): boolean;
    can_blink_to(point: Point): boolean;
    is_collided_with_point(point: Point, range: number): boolean;
    can_walk_to(start_point: Point, end_point: Point): boolean;
    has_move_collision(collision_type: number): boolean;
    get_owner_player(): Player;
    player_shop_check(player: Player): boolean;
    get_model_by_key(unit_key: py.UnitKey): py.ModelKey;
    get_type_by_id(unit_key: py.UnitKey): number;
    damage(data: Unit.DamageData): void;
    get_main_attr(): string;
}
